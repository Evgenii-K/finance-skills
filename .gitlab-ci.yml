image: docker:18.09.9
services:
- docker:18.09.9-dind


variables:
  DOCKER_HOST: tcp://docker:2375
  REGISTRY_URL: $CI_REGISTRY
  IMAGE_TAG: $CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA
  IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH-$CI_COMMIT_SHORT_SHA
  RELEASE: $CI_REGISTRY_IMAGE:latest

stages:
  - build
  - test
  - deploy
  - stop

before_script:
  - echo "Before script section"
  - echo "For example you might run an update here or install a build dependency"
  - echo "Or perhaps you might print out some debugging details"
  - echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY -u gitlab-ci-token --password-stdin
  - apk --no-cache add docker-compose

after_script:
  - echo "After script section"
  - echo "For example you might do some cleanup here"

docker build:
  stage: build
  tags:
    - frontend
  script:
    - docker-compose build --no-cache
    - docker-compose push
  only:
    - master

#unit-test-job:   # This job runs in the test stage.
#  stage: test    # It only starts when the job in the build stage completes successfully.
#  script:
#    - echo "Running unit tests... This will take about 60 seconds."
#    - echo "Code coverage is 90%"
#  only:
#    - master


#lint-test-job:   # This job also runs in the test stage.
#  stage: test    # It can run at the same time as unit-test-job (in parallel).
#  script:
#    - echo "Linting code... This will take about 10 seconds."
#    - echo "No lint issues found."
#  only:
#    - master

#test1:
#  stage: test
#  script:
#    - docker network create web
#    - docker-compose up -d
#  only:
#    - master

deploy to production:
  stage: deploy
  tags:
    - frontend
  before_script:
    - apk update && apk add rsync
    - 'command -v ssh-agent >/dev/null || ( apk add --no-cache openssh-client )'
    - mkdir ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - chmod 600 ~/.ssh
    - apk --no-cache add docker-compose
  script:
    - ssh $USER_HOST "echo "$CI_JOB_TOKEN" |docker login $CI_REGISTRY -u gitlab-ci-token --password-stdin"
    - ssh $USER_HOST mkdir -p $DIR_TMP
    - rsync -av --no-perms --no-owner --exclude '.env' --no-group $CI_PROJECT_DIR/ $USER_HOST:$DIR_TMP
    - docker-compose --version
    - ssh $USER_HOST "cd $DIR_TMP && docker-compose down --remove-orphans" || true
    - ssh $USER_HOST "cd $DIR_TMP && docker-compose pull" || true
    - ssh $USER_HOST "cd $DIR_TMP && docker-compose up -d" || true

  only:
    - master
  #when: manual
  environment:
    name: production
    on_stop: stop to production

stop to production:
  stage: stop
  tags:
    - frontend
  variables:
    TARGET_ENV: production
  script:
    - echo "STOP ${TARGET_ENV}"
  only:
    - master
  when: manual
  environment:
    name: production
    action: stop

